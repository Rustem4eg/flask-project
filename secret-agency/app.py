# app.py
# –°–µ–∫—Ä–µ—Ç–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—å–µ –∞–≥–µ–Ω—Ç–æ–≤
# –ê–≤—Ç–æ—Ä: —Ä–∞–∑–≤–µ–¥—á–∏–∫-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫

from flask import Flask, render_template, request, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
import random

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# –ú–æ–¥–µ–ª—å –∞–≥–µ–Ω—Ç–∞ ‚Äî –∫–∞–∂–¥–æ–µ –¥–æ—Å—å–µ —ç—Ç–æ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
class Agent(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    codename = db.Column(db.String(100), nullable=False, unique=True)
    contact_number = db.Column(db.String(20), nullable=False)
    email = db.Column(db.String(120), nullable=False)
    clearance_level = db.Column(db.String(50), nullable=False)

    def __repr__(self):
        return f'<Agent {self.codename}>'

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–¥–æ–≤—ã—Ö –∏–º—ë–Ω ‚Äî –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —à–µ—Ñ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª
def make_codename():
    parts1 = ['–°–µ—Ä—ã–π', '–ù–µ–∏—Å—Ç–æ–≤—ã–π', '–¢–∏—Ö–æ–Ω—è', '–ß–µ—Ä–Ω—ã–π', '–ö—Ä–∞—Å–Ω—ã–π', '–°—ã–∫–ª–∏–≤—ã–π', '–ö—Ä–µ–ø–∫–∏–π']
    parts2 = ['–í–æ–ª–∫', '–í–æ—Ä–æ–Ω', '–°—Ç—Ä–µ–∫–æ–∑–µ–ª', '–ì—Ä–∏–Ω', '–°–∞–π–≥–∞–∫', '–í—Ä–∏–∑—Ä–∞–∫', '–ö—É—Ä–∫—É–ª—å']
    return f"{random.choice(parts1)} {random.choice(parts2)}"

# –£—Ä–æ–≤–Ω–∏ –¥–æ–ø—É—Å–∫–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ –ø–æ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—É
CLEARANCE_OPTIONS = ["–°–µ–∫—Ä–µ—Ç–Ω–æ", "–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ", "–û—Å–æ–±–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏"]

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç)
with app.app_context():
    db.create_all()

# –ì–ª–∞–≤–Ω–∞—è ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
@app.route('/')
def index():
    agents = Agent.query.all()
    return render_template('agents.html', agents=agents)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
@app.route('/add', methods=['GET', 'POST'])
def add_agent():
    if request.method == 'POST':
        name = request.form.get('codename').strip()
        if not name:
            name = make_codename()
        phone = request.form['contact_number']
        mail = request.form['email']
        level = request.form['clearance_level']

        agent = Agent(
            codename=name,
            contact_number=phone,
            email=mail,
            clearance_level=level
        )
        db.session.add(agent)
        db.session.commit()
        return redirect(url_for('index'))

    # –ü—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É + –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∏–º–µ–Ω–∏
    suggested = make_codename()
    return render_template('add_agent.html', suggested_name=suggested, levels=CLEARANCE_OPTIONS)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—å–µ
@app.route('/agent/<int:id>')
def view_agent(id):
    agent = Agent.query.get_or_404(id)
    return render_template('view_agent.html', agent=agent)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@app.route('/edit/<int:id>', methods=['GET', 'POST'])
def edit_agent(id):
    agent = Agent.query.get_or_404(id)
    if request.method == 'POST':
        agent.codename = request.form['codename']
        agent.contact_number = request.form['contact_number']
        agent.email = request.form['email']
        agent.clearance_level = request.form['clearance_level']
        db.session.commit()
        return redirect(url_for('view_agent', id=id))

    return render_template('edit_agent.html', agent=agent, levels=CLEARANCE_OPTIONS)

# –£–¥–∞–ª–µ–Ω–∏–µ
@app.route('/delete/<int:id>')
def delete_agent(id):
    agent = Agent.query.get_or_404(id)
    db.session.delete(agent)
    db.session.commit()
    return redirect(url_for('index'))

# –§–∏–ª—å—Ç—Ä –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ–ø—É—Å–∫–∞
@app.route('/filter/<level>')
def filter_by_level(level):
    if level not in CLEARANCE_OPTIONS:
        return redirect(url_for('index'))
    agents = Agent.query.filter_by(clearance_level=level).all()
    return render_template('agents.html', agents=agents, current_filter=level)

# –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
@app.route('/emergency/<int:id>')
def emergency_call(id):
    agent = Agent.query.get_or_404(id)
    msg = f"üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≥–µ–Ω—Ç—É {agent.codename} ({agent.email})"
    agents = Agent.query.all()
    return render_template('agents.html', agents=agents, alert=msg)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    app.run(debug=True)